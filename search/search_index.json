{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Komputasi Numerik \u00b6 Nama : Moh. Iqbal Zuhdi Husaeni NIM : 180411100051","title":"index"},{"location":"#komputasi-numerik","text":"Nama : Moh. Iqbal Zuhdi Husaeni NIM : 180411100051","title":"Komputasi Numerik"},{"location":"Tugas-1/","text":"Error in numerical computation \u00b6 Komputasi Numerik \u00b6 Komputasi numerik bisa dikatakan sebagai penentuan error suatu perhitungan untuk mencapai nilai akurasi. Komputer Numerik bertujuan untuk menentukan suatu akurasi dari hasil perhitungan atau percobaan. Komputer Numerik ini banyak sekali diimplementasikan dalam kehidupan termasuk dunia kedokteran, teknik, ekonomi, dan sains. Error \u00b6 Error merupakan perbedaan antara hasil penyelesaian suatu model matematik secara numeric dengan penyelesaian secara analitis. Kesalahan yang terjadi sangatlah penting, karena kesalahan dalam pemakaian algoritma pendekatan akan menyebabkan nilai kesalahan yang besar. Sehingga pendekatan metode numerik selalu membahas tingkat kesalahan dan tingkat kecepatan proses yang akan terjadi. Error disini dibagi menjadi 2 : 1. Absolute Error \u00b6 Kesalahan absolut suatu kuantitas adalah nilai absolut dari selisih antara nilai sebenarnya X dan nilai perkiraan x. Ini dilambangkan dengan $$ Ea = |X - x| $$ 2. Relative Error \u00b6 Relative error biasa disebut sebagai kesalahan relatif dari suatu kuantitas adalah rasio kesalahan absolutnya terhadap nilai sebenarnya. Ini dilambangkan dengan Er. $$ Er = |Xt - Xa / Xt| $$ Deret Maclaurin \u00b6 Suatu fungsi f(x) yang memiliki turunan , , , dan seterusnya yang kontinyu dalam interval dengan maka untuk disekitar yaitu , dapat diekspansi kedalam Deret Taylor. Deret Taylor didefinisikan seperti berikut. $$ f(x) = f(a) + {f^1(a) (x-a) \\over 1!} + {f^2(a) (x-a)^2 \\over 2!} + {f^3(a) (x-a)^3 \\over 3!} ... {f^n(a) (x-a)^n \\over n!} $$ Deret MacLaurin hampir sama dengan dengan Deret Taylor, hanya saja dalam deret maclaurin nilai a=0, sehingga persamaannya adalah seperti berikut. $$ f(x) = f(0) + {f^1(0)x \\over 1!} + {f^2(0)x^2 \\over 2!} + {f^3(0)x^3 \\over 3!} ... {f^n(0)x^n \\over n!} $$ Deret MacLaurin biasa disebut sebagai deret Taylor baku, kerena deret maclaurin merupakan standar atau dasar yang berlaku dengan a=0. Atau persamaan Deret MacLaurin diatas dapat ditulis seperti berikut. $$ f(x) = \\sum \\limits_{i=0}^{n} {f^i(0)x^i \\over i!} $$ Implementasi Program \u00b6 membuat program supaya dapaat mengekspansi bilangan e^3x dengan nilai x=1 hingga nilai menjadi kurang dari 0,001 bisa dengan Implementasi Program sebagai berikut. #f(x)=e**3x import math x = 1 i = 1 f = 1 while i > 0 : e = (( 3 ** i ) * x ** i ) / math . factorial ( i ) f1 = f + e print ( \"iterasi ke-\" + str ( i )) print ( \"Hasil suku lama =\" , f ) print ( \"Hasil suku baru =\" , f1 ) h = abs ( f - f1 ) #ini selisih print ( \"selisih =\" , h , \" \\n \" ) if h <= 0.001 : break else : f += e i += 1 print ( \"jumlah iterasi =\" , i ) Output : iterasi ke-1 Hasil suku lama = 1 Hasil suku baru = 4.0 selisih = 3.0 iterasi ke-2 Hasil suku lama = 4.0 Hasil suku baru = 8.5 selisih = 4.5 iterasi ke-3 Hasil suku lama = 8.5 Hasil suku baru = 13.0 selisih = 4.5 iterasi ke-4 Hasil suku lama = 13.0 Hasil suku baru = 16.375 selisih = 3.375 iterasi ke-5 Hasil suku lama = 16.375 Hasil suku baru = 18.4 selisih = 2.0249999999999986 iterasi ke-6 Hasil suku lama = 18.4 Hasil suku baru = 19.412499999999998 selisih = 1.0124999999999993 iterasi ke-7 Hasil suku lama = 19.412499999999998 Hasil suku baru = 19.846428571428568 selisih = 0.4339285714285701 iterasi ke-8 Hasil suku lama = 19.846428571428568 Hasil suku baru = 20.009151785714284 selisih = 0.162723214285716 iterasi ke-9 Hasil suku lama = 20.009151785714284 Hasil suku baru = 20.063392857142855 selisih = 0.05424107142857082 iterasi ke-10 Hasil suku lama = 20.063392857142855 Hasil suku baru = 20.079665178571425 selisih = 0.016272321428569825 iterasi ke-11 Hasil suku lama = 20.079665178571425 Hasil suku baru = 20.08410308441558 selisih = 0.004437905844156376 iterasi ke-12 Hasil suku lama = 20.08410308441558 Hasil suku baru = 20.08521256087662 selisih = 0.001109476461039094 iterasi ke-13 Hasil suku lama = 20.08521256087662 Hasil suku baru = 20.08546859390609 selisih = 0.0002560330294691937 jumlah iterasi = 13 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Error in Numerical"},{"location":"Tugas-1/#error-in-numerical-computation","text":"","title":"Error in numerical computation"},{"location":"Tugas-1/#komputasi-numerik","text":"Komputasi numerik bisa dikatakan sebagai penentuan error suatu perhitungan untuk mencapai nilai akurasi. Komputer Numerik bertujuan untuk menentukan suatu akurasi dari hasil perhitungan atau percobaan. Komputer Numerik ini banyak sekali diimplementasikan dalam kehidupan termasuk dunia kedokteran, teknik, ekonomi, dan sains.","title":"Komputasi Numerik"},{"location":"Tugas-1/#error","text":"Error merupakan perbedaan antara hasil penyelesaian suatu model matematik secara numeric dengan penyelesaian secara analitis. Kesalahan yang terjadi sangatlah penting, karena kesalahan dalam pemakaian algoritma pendekatan akan menyebabkan nilai kesalahan yang besar. Sehingga pendekatan metode numerik selalu membahas tingkat kesalahan dan tingkat kecepatan proses yang akan terjadi. Error disini dibagi menjadi 2 :","title":"Error"},{"location":"Tugas-1/#1-absolute-error","text":"Kesalahan absolut suatu kuantitas adalah nilai absolut dari selisih antara nilai sebenarnya X dan nilai perkiraan x. Ini dilambangkan dengan $$ Ea = |X - x| $$","title":"1. Absolute Error"},{"location":"Tugas-1/#2-relative-error","text":"Relative error biasa disebut sebagai kesalahan relatif dari suatu kuantitas adalah rasio kesalahan absolutnya terhadap nilai sebenarnya. Ini dilambangkan dengan Er. $$ Er = |Xt - Xa / Xt| $$","title":"2. Relative Error"},{"location":"Tugas-1/#deret-maclaurin","text":"Suatu fungsi f(x) yang memiliki turunan , , , dan seterusnya yang kontinyu dalam interval dengan maka untuk disekitar yaitu , dapat diekspansi kedalam Deret Taylor. Deret Taylor didefinisikan seperti berikut. $$ f(x) = f(a) + {f^1(a) (x-a) \\over 1!} + {f^2(a) (x-a)^2 \\over 2!} + {f^3(a) (x-a)^3 \\over 3!} ... {f^n(a) (x-a)^n \\over n!} $$ Deret MacLaurin hampir sama dengan dengan Deret Taylor, hanya saja dalam deret maclaurin nilai a=0, sehingga persamaannya adalah seperti berikut. $$ f(x) = f(0) + {f^1(0)x \\over 1!} + {f^2(0)x^2 \\over 2!} + {f^3(0)x^3 \\over 3!} ... {f^n(0)x^n \\over n!} $$ Deret MacLaurin biasa disebut sebagai deret Taylor baku, kerena deret maclaurin merupakan standar atau dasar yang berlaku dengan a=0. Atau persamaan Deret MacLaurin diatas dapat ditulis seperti berikut. $$ f(x) = \\sum \\limits_{i=0}^{n} {f^i(0)x^i \\over i!} $$","title":"Deret Maclaurin"},{"location":"Tugas-1/#implementasi-program","text":"membuat program supaya dapaat mengekspansi bilangan e^3x dengan nilai x=1 hingga nilai menjadi kurang dari 0,001 bisa dengan Implementasi Program sebagai berikut. #f(x)=e**3x import math x = 1 i = 1 f = 1 while i > 0 : e = (( 3 ** i ) * x ** i ) / math . factorial ( i ) f1 = f + e print ( \"iterasi ke-\" + str ( i )) print ( \"Hasil suku lama =\" , f ) print ( \"Hasil suku baru =\" , f1 ) h = abs ( f - f1 ) #ini selisih print ( \"selisih =\" , h , \" \\n \" ) if h <= 0.001 : break else : f += e i += 1 print ( \"jumlah iterasi =\" , i ) Output : iterasi ke-1 Hasil suku lama = 1 Hasil suku baru = 4.0 selisih = 3.0 iterasi ke-2 Hasil suku lama = 4.0 Hasil suku baru = 8.5 selisih = 4.5 iterasi ke-3 Hasil suku lama = 8.5 Hasil suku baru = 13.0 selisih = 4.5 iterasi ke-4 Hasil suku lama = 13.0 Hasil suku baru = 16.375 selisih = 3.375 iterasi ke-5 Hasil suku lama = 16.375 Hasil suku baru = 18.4 selisih = 2.0249999999999986 iterasi ke-6 Hasil suku lama = 18.4 Hasil suku baru = 19.412499999999998 selisih = 1.0124999999999993 iterasi ke-7 Hasil suku lama = 19.412499999999998 Hasil suku baru = 19.846428571428568 selisih = 0.4339285714285701 iterasi ke-8 Hasil suku lama = 19.846428571428568 Hasil suku baru = 20.009151785714284 selisih = 0.162723214285716 iterasi ke-9 Hasil suku lama = 20.009151785714284 Hasil suku baru = 20.063392857142855 selisih = 0.05424107142857082 iterasi ke-10 Hasil suku lama = 20.063392857142855 Hasil suku baru = 20.079665178571425 selisih = 0.016272321428569825 iterasi ke-11 Hasil suku lama = 20.079665178571425 Hasil suku baru = 20.08410308441558 selisih = 0.004437905844156376 iterasi ke-12 Hasil suku lama = 20.08410308441558 Hasil suku baru = 20.08521256087662 selisih = 0.001109476461039094 iterasi ke-13 Hasil suku lama = 20.08521256087662 Hasil suku baru = 20.08546859390609 selisih = 0.0002560330294691937 jumlah iterasi = 13 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Implementasi Program"},{"location":"Tugas-2/","text":"Numerical Solution of Algebraic and Transcendental Equation \u00b6 Metode Bisection \u00b6 Metode Bisection ini membagi range menjadi 2 bagian, dari dua bagian ini dipilih bagian mana yang mengandung akar sedangkan bagian yang tidak mengandung akar akan dibuang. Hal ini dilakukan berulang-ulang hingga diperoleh suatu akar persamaan. Algoritma metode bisection Definisikan fungsi f(x) yang akan dicari akarnya tentukan range atau nilai a dan b tentukan nilai toleransi dan iterasi maksimum hitung f(a) dan f(b) jika f(a)*f(b)>0 maka proses dihentikan karena tidak ada akar jika f(a)*f(b)<0 maka................. hitung nilai c $$ c =\\frac{(a+b)}{2} $$ hitung nilai f(c) Bila f(c).f(a)<0 maka b = c dan f(b)=f(c), bila tidak maka a=c dan f(a)=f(c) Jika |b-a|< e atau iterasi > iterasi maks maka proses dihentikan dan didapatkan akar x, bila tidak, ulangi langkah 6 Code Program #Bisection def bis ( a , b , n ): e = 0.001 fa = a ** 2 - 5 * a + 6 fb = b ** 2 - 5 * b + 6 if fa * fb < 0 : x = ( a + b ) / 2 fx = x ** 2 - 5 * x + 6 if fa * fx < 0 : b = x elif fx * fb < 0 : a = x if abs ( a - b ) < e : print ( \"Jumlah Iterasi : \" , n ) print ( x ) else : n += 1 print ( \"iterasi ke-\" + str ( n )) bis ( a , b , n ) else : if fa < fb : a -= 0.1 elif fb < fa : b += 0.1 bis ( a , b , n ) a = float ( input ( \"Masukkan nilai a : \" )) b = float ( input ( \"Masukkan nilai b : \" )) bis ( a , b , 0 ) Output Masukkan nilai a : 1 Masukkan nilai b : 2.3 iterasi ke - 1 iterasi ke - 2 iterasi ke - 3 iterasi ke - 4 iterasi ke - 5 iterasi ke - 6 iterasi ke - 7 iterasi ke - 8 iterasi ke - 9 iterasi ke - 10 Jumlah Iterasi : 10 1.9997558593749996 Metode Regula Falsi \u00b6 Metode regula falsi adalah Metode pencarian akar persamaan dengan memanfaatkan kemiringan dan selisih tinggi dari dua titik batas range. Dua titik a dan b pada fungsi f(x) digunakan untuk mengestimasi posisi c dari akar interpolasi linier. Dikenal dengan metode False Position Metode ini juga merupakan penyempurna dari metode bisection Rumus c dari regula falsi : $$ c = a-f(a) \\frac{(b-a)}{f(b)-f(a)} $$ Algoritma metode regula falsi (benerin lagii) Definisikan fungsi f(x) yang akan dicari akarnya tentukan batas atas dan batas bawah tentukan nilai toleransi dan iterasi maksimum hitung f(a) dan f(b) jika f(a)*f(b)>0 maka proses dihentikan karena tidak ada akar jika f(a)*f(b)<0 maka................. hitung nilai c $$ c =\\frac{(a+b)}{2} $$ hitung nilai f(c) Bila f(c).f(a)<0 maka b = c dan f(b)=f(c), bila tidak maka a=c dan f(a)=f(c) Jika |b-a|< e atau iterasi > iterasi maks maka proses dihentikan dan didapatkan akar x, bila tidak, ulangi langkah 6 Code Program #Regula-Falsi def Regfal ( a , b , n ): e = 0.001 fa = a ** 2 - 5 * a + 6 fb = b ** 2 - 5 * b + 6 if fa * fb < 0 : n += 1 print ( \"iterasi ke-\" + str ( n )) x = (( a * abs ( fb )) + ( b * abs ( fa ))) / ( abs ( fa ) + abs ( fb )) fx = x ** 2 - 5 * x + 6 if fa * fx < 0 : b = x else : a = x if abs ( a - b ) < e : print ( x ) else : Regfal ( a , b , n ) else : if fa < fb : a -= 0.1 else : b += 0.1 Regfal ( a , b , n ) a = float ( input ( \"Masukkan interval a : \" )) b = float ( input ( \"Masukkan interval b : \" )) Regfal ( a , b , 0 ) Output Masukkan interval a : 1 Masukkan interval b : 2.1 iterasi ke-1 iterasi ke-2 iterasi ke-3 iterasi ke-4 iterasi ke-5 iterasi ke-6 iterasi ke-7 iterasi ke-8 iterasi ke-9 iterasi ke-10 iterasi ke-11 iterasi ke-12 iterasi ke-13 iterasi ke-14 iterasi ke-15 iterasi ke-16 iterasi ke-17 iterasi ke-18 iterasi ke-19 iterasi ke-20 iterasi ke-21 iterasi ke-22 iterasi ke-23 iterasi ke-24 iterasi ke-25 iterasi ke-26 iterasi ke-27 iterasi ke-28 iterasi ke-29 iterasi ke-30 iterasi ke-31 iterasi ke-32 iterasi ke-33 iterasi ke-34 iterasi ke-35 iterasi ke-36 iterasi ke-37 iterasi ke-38 iterasi ke-39 iterasi ke-40 iterasi ke-41 iterasi ke-42 iterasi ke-43 iterasi ke-44 iterasi ke-45 iterasi ke-46 iterasi ke-47 2.0000000000000004 Metode Newton Raphson \u00b6 \u200b Dalam analisis numerik, metode Newton / Newton-Raphson yang mendapat nama dari Isaac Newton dan Joseph Rapshon, merupakan metode yang paling dikenal untuk mencari akar suatu fungsi f(x) dengan pendekatan satu titik dimana fungsi f(x) mempunyai turunan. Prosedur Metode Newton : menentukan x_0 sebagai titik awal, kemudian menarik garis lurus yang menyinggung titik f(x_0) . Hal ini berakibat garis I memotong sumbu x di titik x_1 Setelah itu diulangi langkah sebelumnya tapi sekarang x_1 dianggap sebagai titik awalnya. Dari mengulang langkah-langkah sebelumnya akan mendapatkan x_2 , x_3 , ... , x_n dengan x_n yang diperoleh adalah bilangan riil yang merupakan akar atau mendekati akar yang sebenarnya. persamaan garis I : y - y_0 = m(x - x_0) $$ y - f(x_0) = f'(x_0)(x - x_0) $$ x_1 perpotongan garis I dengan sumbu - x $$ 0 - f(x_0) = f'(x_0)(x - x_0) $$ y = 0 dan x = x_1 maka koordinat titik ( x_1 ,0) $$ - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) $$ sehingga di dapat sebuah rumus : $$ f'(x_n)=\\frac{f(x_n)-0}{f'(x_n)-{x_{n+1}}} $$ atau dapat diatur kembali menjadi : $$ x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_{n+1} = x_{n} - \\frac{f(x_{n})}{f'(x_{n})} $$ Program #Newton-Raphson x = float ( input ( \"Masukkan nilai awal x : \" )) n = 0 e = 0.001 while n >= 0 : print ( \"iterasi saat X\" + str ( n )) fx = x ** 2 - 5 * x + 6 fax = 2 * x - 5 x1 = x - ( fx / fax ) if abs ( x1 - x ) < e or n >= 100 : print ( \"Jumlah iterasi : \" , n + 1 ) print ( x ) break else : x = x1 n += 1 Output Masukkan nilai awal x : 2.4 iterasi saat X0 iterasi saat X1 iterasi saat X2 iterasi saat X3 iterasi saat X4 iterasi saat X5 Jumlah iterasi : 6 1.9999976821746035 Metode Secant \u00b6 Metode Newton Raphson memerlukan perhitungan turunan fungsi f\u2019(x). Tidak semua fungsi mudah dicari turunannya terutama fungsi yang bentuknya rumit. Turunan fungsi dapat dihilangkan dengan cara menggantinya dengan bentuk lain yang ekivalen.Modifikasi metode Newton Raphson dinamakan metode Secant. Rumus Metode Secant $$ x_{r+1}=x_r-\\frac{f(x_r)(x_r - x_{r-1})}{f(x_r)-{x_{r+1}}} $$ Algoritma Metode Secant Definisikan f(x) Definisikan toleransi error e dan iterasi maksimum (n) Masukan dua nilai pendekatan awal yang diantaranya terdapat akar yaitu x0 dan x1 ,sebaiknya gunakan metode tabel untuk menjamin titik pendekatanya adalah titik pendekatan yang konvergensinya pada akar persamaan yang diharapkan. Hitung f(x0 ) dan f(x1) Untuk iterasi 1 s/d N : $$ x_{r+1}=x_r-\\frac{f(x_r)(x_r - x_{r-1})}{f(x_r)-{x_{r+1}}} $$ $$ Hitungf(x_{r+1}) $$ Program #Secant def Secant ( a , b , n ): e = 0.001 fa = a ** 2 - 5 * a + 6 fb = b ** 2 - 5 * b + 6 x = a - (( b - a ) / ( fb - fa )) * fa fx = x ** 2 - 5 * x + 6 n += 1 print ( \"iterasi ke-\" + str ( n )) if abs ( a - b ) < e : print ( \"Jumlah iterasi :\" , n ) print ( x ) else : a = b b = x Secant ( a , b , n ) a = float ( input ( \"Masukkan nilai a : \" )) b = float ( input ( \"Masukkan nilai b : \" )) n = 0 Secant ( a , b , 0 ) Output Masukkan nilai a : 1 Masukkan nilai b : 1.5 iterasi ke-1 iterasi ke-2 iterasi ke-3 iterasi ke-4 iterasi ke-5 iterasi ke-6 Jumlah iterasi : 6 1.9999999975499005 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Numerical Solution"},{"location":"Tugas-2/#numerical-solution-of-algebraic-and-transcendental-equation","text":"","title":"Numerical Solution of Algebraic and Transcendental Equation"},{"location":"Tugas-2/#metode-bisection","text":"Metode Bisection ini membagi range menjadi 2 bagian, dari dua bagian ini dipilih bagian mana yang mengandung akar sedangkan bagian yang tidak mengandung akar akan dibuang. Hal ini dilakukan berulang-ulang hingga diperoleh suatu akar persamaan. Algoritma metode bisection Definisikan fungsi f(x) yang akan dicari akarnya tentukan range atau nilai a dan b tentukan nilai toleransi dan iterasi maksimum hitung f(a) dan f(b) jika f(a)*f(b)>0 maka proses dihentikan karena tidak ada akar jika f(a)*f(b)<0 maka................. hitung nilai c $$ c =\\frac{(a+b)}{2} $$ hitung nilai f(c) Bila f(c).f(a)<0 maka b = c dan f(b)=f(c), bila tidak maka a=c dan f(a)=f(c) Jika |b-a|< e atau iterasi > iterasi maks maka proses dihentikan dan didapatkan akar x, bila tidak, ulangi langkah 6 Code Program #Bisection def bis ( a , b , n ): e = 0.001 fa = a ** 2 - 5 * a + 6 fb = b ** 2 - 5 * b + 6 if fa * fb < 0 : x = ( a + b ) / 2 fx = x ** 2 - 5 * x + 6 if fa * fx < 0 : b = x elif fx * fb < 0 : a = x if abs ( a - b ) < e : print ( \"Jumlah Iterasi : \" , n ) print ( x ) else : n += 1 print ( \"iterasi ke-\" + str ( n )) bis ( a , b , n ) else : if fa < fb : a -= 0.1 elif fb < fa : b += 0.1 bis ( a , b , n ) a = float ( input ( \"Masukkan nilai a : \" )) b = float ( input ( \"Masukkan nilai b : \" )) bis ( a , b , 0 ) Output Masukkan nilai a : 1 Masukkan nilai b : 2.3 iterasi ke - 1 iterasi ke - 2 iterasi ke - 3 iterasi ke - 4 iterasi ke - 5 iterasi ke - 6 iterasi ke - 7 iterasi ke - 8 iterasi ke - 9 iterasi ke - 10 Jumlah Iterasi : 10 1.9997558593749996","title":"Metode Bisection"},{"location":"Tugas-2/#metode-regula-falsi","text":"Metode regula falsi adalah Metode pencarian akar persamaan dengan memanfaatkan kemiringan dan selisih tinggi dari dua titik batas range. Dua titik a dan b pada fungsi f(x) digunakan untuk mengestimasi posisi c dari akar interpolasi linier. Dikenal dengan metode False Position Metode ini juga merupakan penyempurna dari metode bisection Rumus c dari regula falsi : $$ c = a-f(a) \\frac{(b-a)}{f(b)-f(a)} $$ Algoritma metode regula falsi (benerin lagii) Definisikan fungsi f(x) yang akan dicari akarnya tentukan batas atas dan batas bawah tentukan nilai toleransi dan iterasi maksimum hitung f(a) dan f(b) jika f(a)*f(b)>0 maka proses dihentikan karena tidak ada akar jika f(a)*f(b)<0 maka................. hitung nilai c $$ c =\\frac{(a+b)}{2} $$ hitung nilai f(c) Bila f(c).f(a)<0 maka b = c dan f(b)=f(c), bila tidak maka a=c dan f(a)=f(c) Jika |b-a|< e atau iterasi > iterasi maks maka proses dihentikan dan didapatkan akar x, bila tidak, ulangi langkah 6 Code Program #Regula-Falsi def Regfal ( a , b , n ): e = 0.001 fa = a ** 2 - 5 * a + 6 fb = b ** 2 - 5 * b + 6 if fa * fb < 0 : n += 1 print ( \"iterasi ke-\" + str ( n )) x = (( a * abs ( fb )) + ( b * abs ( fa ))) / ( abs ( fa ) + abs ( fb )) fx = x ** 2 - 5 * x + 6 if fa * fx < 0 : b = x else : a = x if abs ( a - b ) < e : print ( x ) else : Regfal ( a , b , n ) else : if fa < fb : a -= 0.1 else : b += 0.1 Regfal ( a , b , n ) a = float ( input ( \"Masukkan interval a : \" )) b = float ( input ( \"Masukkan interval b : \" )) Regfal ( a , b , 0 ) Output Masukkan interval a : 1 Masukkan interval b : 2.1 iterasi ke-1 iterasi ke-2 iterasi ke-3 iterasi ke-4 iterasi ke-5 iterasi ke-6 iterasi ke-7 iterasi ke-8 iterasi ke-9 iterasi ke-10 iterasi ke-11 iterasi ke-12 iterasi ke-13 iterasi ke-14 iterasi ke-15 iterasi ke-16 iterasi ke-17 iterasi ke-18 iterasi ke-19 iterasi ke-20 iterasi ke-21 iterasi ke-22 iterasi ke-23 iterasi ke-24 iterasi ke-25 iterasi ke-26 iterasi ke-27 iterasi ke-28 iterasi ke-29 iterasi ke-30 iterasi ke-31 iterasi ke-32 iterasi ke-33 iterasi ke-34 iterasi ke-35 iterasi ke-36 iterasi ke-37 iterasi ke-38 iterasi ke-39 iterasi ke-40 iterasi ke-41 iterasi ke-42 iterasi ke-43 iterasi ke-44 iterasi ke-45 iterasi ke-46 iterasi ke-47 2.0000000000000004","title":"Metode Regula Falsi"},{"location":"Tugas-2/#metode-newton-raphson","text":"\u200b Dalam analisis numerik, metode Newton / Newton-Raphson yang mendapat nama dari Isaac Newton dan Joseph Rapshon, merupakan metode yang paling dikenal untuk mencari akar suatu fungsi f(x) dengan pendekatan satu titik dimana fungsi f(x) mempunyai turunan. Prosedur Metode Newton : menentukan x_0 sebagai titik awal, kemudian menarik garis lurus yang menyinggung titik f(x_0) . Hal ini berakibat garis I memotong sumbu x di titik x_1 Setelah itu diulangi langkah sebelumnya tapi sekarang x_1 dianggap sebagai titik awalnya. Dari mengulang langkah-langkah sebelumnya akan mendapatkan x_2 , x_3 , ... , x_n dengan x_n yang diperoleh adalah bilangan riil yang merupakan akar atau mendekati akar yang sebenarnya. persamaan garis I : y - y_0 = m(x - x_0) $$ y - f(x_0) = f'(x_0)(x - x_0) $$ x_1 perpotongan garis I dengan sumbu - x $$ 0 - f(x_0) = f'(x_0)(x - x_0) $$ y = 0 dan x = x_1 maka koordinat titik ( x_1 ,0) $$ - \\frac{f(x_0)}{f'(x_0)} = (x_1 - x_0) $$ sehingga di dapat sebuah rumus : $$ f'(x_n)=\\frac{f(x_n)-0}{f'(x_n)-{x_{n+1}}} $$ atau dapat diatur kembali menjadi : $$ x_1 = x_0 - \\frac{f(x_0)}{f'(x_0)} , x_2 = x_1 - \\frac{f(x_1)}{f'(x_1)}, ... , x_{n+1} = x_{n} - \\frac{f(x_{n})}{f'(x_{n})} $$ Program #Newton-Raphson x = float ( input ( \"Masukkan nilai awal x : \" )) n = 0 e = 0.001 while n >= 0 : print ( \"iterasi saat X\" + str ( n )) fx = x ** 2 - 5 * x + 6 fax = 2 * x - 5 x1 = x - ( fx / fax ) if abs ( x1 - x ) < e or n >= 100 : print ( \"Jumlah iterasi : \" , n + 1 ) print ( x ) break else : x = x1 n += 1 Output Masukkan nilai awal x : 2.4 iterasi saat X0 iterasi saat X1 iterasi saat X2 iterasi saat X3 iterasi saat X4 iterasi saat X5 Jumlah iterasi : 6 1.9999976821746035","title":"Metode Newton Raphson"},{"location":"Tugas-2/#metode-secant","text":"Metode Newton Raphson memerlukan perhitungan turunan fungsi f\u2019(x). Tidak semua fungsi mudah dicari turunannya terutama fungsi yang bentuknya rumit. Turunan fungsi dapat dihilangkan dengan cara menggantinya dengan bentuk lain yang ekivalen.Modifikasi metode Newton Raphson dinamakan metode Secant. Rumus Metode Secant $$ x_{r+1}=x_r-\\frac{f(x_r)(x_r - x_{r-1})}{f(x_r)-{x_{r+1}}} $$ Algoritma Metode Secant Definisikan f(x) Definisikan toleransi error e dan iterasi maksimum (n) Masukan dua nilai pendekatan awal yang diantaranya terdapat akar yaitu x0 dan x1 ,sebaiknya gunakan metode tabel untuk menjamin titik pendekatanya adalah titik pendekatan yang konvergensinya pada akar persamaan yang diharapkan. Hitung f(x0 ) dan f(x1) Untuk iterasi 1 s/d N : $$ x_{r+1}=x_r-\\frac{f(x_r)(x_r - x_{r-1})}{f(x_r)-{x_{r+1}}} $$ $$ Hitungf(x_{r+1}) $$ Program #Secant def Secant ( a , b , n ): e = 0.001 fa = a ** 2 - 5 * a + 6 fb = b ** 2 - 5 * b + 6 x = a - (( b - a ) / ( fb - fa )) * fa fx = x ** 2 - 5 * x + 6 n += 1 print ( \"iterasi ke-\" + str ( n )) if abs ( a - b ) < e : print ( \"Jumlah iterasi :\" , n ) print ( x ) else : a = b b = x Secant ( a , b , n ) a = float ( input ( \"Masukkan nilai a : \" )) b = float ( input ( \"Masukkan nilai b : \" )) n = 0 Secant ( a , b , 0 ) Output Masukkan nilai a : 1 Masukkan nilai b : 1.5 iterasi ke-1 iterasi ke-2 iterasi ke-3 iterasi ke-4 iterasi ke-5 iterasi ke-6 Jumlah iterasi : 6 1.9999999975499005 MathJax.Hub.Config({ tex2jax: {inlineMath: [['$$','$$']]} });","title":"Metode Secant"}]}